{
  "swagger": "2.0",
  "info": {
    "description": "API documentation for the Listify application.",
    "version": "1.0.0",
    "title": "Listify API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "tleveille@my.bcit.ca"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "listify.swagger.io",
  "basePath": "/v2",
  "tags": [
    {
      "name": "list",
      "description": "Everything about your Lists",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "preferences",
      "description": "User Preferences for your account",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations associated with the user",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "admin",
      "description": "Operations associated administrative use",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/list/{userId}": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get all lists by user ID",
        "description": "Retrieves all lists belonging to the specified userID",
        "operationId": "getUserLists",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userID",
            "in": "path",
            "description": "ID of the user who owns the list",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful",
            "schema": {
              "type": "object",
              "$ref": "#/definitions/List"
            }
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      },
      "post": {
        "tags": [
          "list"
        ],
        "summary": "Create new list",
        "description": "Used to create a new list for the specified user ID",
        "operationId": "createList",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created list object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      }
    },
    "/list/{listId}/name": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get list name by list ID",
        "description": "Retrieves the list name for the specified list ID",
        "operationId": "getListName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "ID of the list",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          },
          "404": {
            "description": "List not found"
          }
        }
      }
    },
    "/list/{listId}": {
      "put": {
        "tags": [
          "list"
        ],
        "summary": "Update an existing list name",
        "description": "Update the name of list that already exists in the databse.",
        "operationId": "updateList",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "ID of the list to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated list object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/List"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      },
      "delete": {
        "tags": [
          "list"
        ],
        "summary": "Delete list by list ID",
        "description": "Deletes the list corresponding to the specified list ID",
        "operationId": "deleteListById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List ID to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      }
    },
    "/list/{listId}/listItem": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get all list items for the specified list ID",
        "description": "Retrieves all list items belonging to the list ID.",
        "operationId": "getListItems",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "List ID of the list containing the items",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "List not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "list"
        ],
        "summary": "Add a list item to an existing list",
        "description": "Adds a list item to a list that exists in the database.",
        "operationId": "addListItem",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listid",
            "in": "path",
            "description": "ID of list that the list item needs to be added to",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Add list item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "List not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/list/{listId}/{listItemId}": {
      "put": {
        "tags": [
          "list"
        ],
        "summary": "Update a list item in an existing list",
        "description": "Updates the list item corresponding to a specific list ID.",
        "operationId": "updateListItem",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "ID of list that the list item needs to be added to",
            "required": true,
            "type": "integer"
          },
          {
            "name": "listItemId",
            "in": "path",
            "description": "ID of list item that needs to be updated",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated list item object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListItem"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "List not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "list"
        ],
        "summary": "Delete a list item from an existing list",
        "description": "Deletes an item from an existing list",
        "operationId": "deleteListItem",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "listId",
            "in": "path",
            "description": "ID of the list that contains the list item to be deleted",
            "required": true,
            "type": "integer"
          },
          {
            "name": "listItemId",
            "in": "path",
            "description": "ID of the listitem to be deleted",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "List not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/preferences/{userId}": {
      "get": {
        "tags": [
          "preferences"
        ],
        "summary": "Get the theme preferences by the user's ID",
        "description": "Retrieves the user's theme preferences.",
        "operationId": "getPreferencesById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The user's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Operation Failed"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "preferences"
        ],
        "summary": "Updates the theme preferences by the user's ID",
        "description": "Updates the theme preferences ",
        "operationId": "updatePreferencesById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The user's ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "user preferences object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Preferences"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Operation Failed"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "Creates a new user in the database. Used for sign up purposes",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Account already exists"
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User login object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Incorrect email/password"
          }
        }
      }
    },
    "/admin": {
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Sign in to access admin resources.",
        "description": "Retrieves all statistics regarding server traffic",
        "operationId": "getUserLists",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Admin User object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AdminUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      }
    }, 
    "/admin/statistics": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get API executions statistics",
        "description": "Can only be accessed by those user who have verified admin credentials.",
        "operationId": "getStats",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
        ],
        "responses": {
          "200": {
            "description": "Operation Successful"
          },
          "400": {
            "description": "Operation Failed"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "List": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "listName": {
          "type": "string"
        }
      },
      "xml": {
        "name": "List"
      }
    },
    "ListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "listId": {
          "type": "integer",
          "format": "int64"
        },
        "item": {
          "type": "string"
        },
        "isChecked": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "List"
      }
    },
    "Preferences": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "backgroundColor": {
          "type": "string"
        },
        "fontColor": {
          "type": "string"
        }
      },
      "xml": {
        "name": "List"
      }
    },
    "Stat": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "method": {
          "type": "string"
        },
        "endpoint": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Stat"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserLogin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserLogin"
      }
    },
    "AdminUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "AdminUser"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}